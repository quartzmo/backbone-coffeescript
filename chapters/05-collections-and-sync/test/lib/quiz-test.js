// Generated by CoffeeScript 1.6.1
(function() {

  describe('Collections and Sync', function() {
    before(function() {
      return this.json = {
        "choices": [
          {
            "exercise_id": 1,
            "position": 1,
            "body": "Model"
          }, {
            "exercise_id": 1,
            "position": 2,
            "body": "View"
          }, {
            "exercise_id": 1,
            "position": 3,
            "body": "Controller"
          }, {
            "exercise_id": 1,
            "position": 4,
            "body": "None of the above"
          }, {
            "exercise_id": 2,
            "position": 1,
            "body": "Underscore"
          }, {
            "exercise_id": 2,
            "position": 2,
            "body": "Handlebars"
          }, {
            "exercise_id": 2,
            "position": 4,
            "body": "All of the above"
          }
        ]
      };
    });
    describe("Backbone.Collection", function() {
      return describe("add", function() {
        return it("should create an instance of Backbone.Model", function() {
          var collection;
          collection = new Backbone.Collection;
          collection.add({});
          collection.length.should.equal(1);
          return collection.at(0).should.be.an.instanceOf(Backbone.Model);
        });
      });
    });
    describe("Scores", function() {
      return describe("add", function() {
        return it("should create an instance of Score", function() {
          var scores;
          scores = new Scores;
          scores.add({});
          scores.at(0).should.be.an.instanceOf(Score);
          return scores.at(0).get('points').should.equal(0);
        });
      });
    });
    return describe("Backbone.Collection", function() {
      beforeEach(function() {
        return this.collection = new Backbone.Collection(this.json.choices);
      });
      describe("initialize", function() {
        return it("should create instances of Backbone.Model from JSON", function() {
          return this.collection.length.should.equal(7);
        });
      });
      describe("at", function() {
        return it("should return models in the same order as the original JSON", function() {
          var first;
          first = this.collection.at(0);
          first.get('exercise_id').should.equal(1);
          return first.get('position').should.equal(1);
        });
      });
      describe("push", function() {
        return it("should return the created model", function() {
          var popped, pushed;
          pushed = this.collection.push({
            exercise_id: 2,
            position: 5,
            body: "None of the above"
          });
          this.collection.length.should.equal(8);
          popped = this.collection.pop();
          popped.should.equal(pushed);
          return this.collection.length.should.equal(7);
        });
      });
      describe("reset", function() {
        return it("should replace the existing models", function() {
          this.collection.reset();
          this.collection.length.should.equal(0);
          this.collection.reset(this.json.choices);
          return this.collection.length.should.equal(7);
        });
      });
      describe("add", function() {
        return it("should add all models from an array", function() {
          this.collection.add([
            {
              exercise_id: 2,
              position: 3,
              body: "JSP"
            }, {
              exercise_id: 2,
              position: 5,
              body: "None of the above"
            }
          ]);
          this.collection.length.should.equal(9);
          this.collection.at(6).get('position').should.equal(4);
          this.collection.at(7).get('position').should.equal(3);
          return this.collection.at(8).get('position').should.equal(5);
        });
      });
      describe("comparator (model)", function() {
        return it("should enable custom ordering by a single attribute", function() {
          this.collection.comparator = function(model) {
            return model.get('position');
          };
          this.collection.add({
            exercise_id: 2,
            position: 3,
            body: "JSP"
          });
          return this.collection.pluck('position').should.eql([1, 1, 2, 2, 3, 3, 4, 4]);
        });
      });
      describe("comparator (a, b)", function() {
        return it("should enable custom ordering by an arbitrary comparison method", function() {
          this.collection.comparator = function(a, b) {
            if (a.get('exercise_id') === b.get('exercise_id')) {
              return a.get('position') - b.get('position');
            } else {
              return a.get('exercise_id') - b.get('exercise_id');
            }
          };
          this.collection.add({
            exercise_id: 2,
            position: 3,
            body: "JSP"
          });
          this.collection.pluck('exercise_id').should.eql([1, 1, 1, 1, 2, 2, 2, 2]);
          return this.collection.pluck('position').should.eql([1, 2, 3, 4, 1, 2, 3, 4]);
        });
      });
      describe("where", function() {
        return it("should return models matched by a simple query on attributes", function() {
          var choices;
          choices = this.collection.where({
            exercise_id: 2,
            position: 4
          });
          choices.should.be.an.instanceOf(Array);
          choices.length.should.equal(1);
          return choices[0].get('body').should.equal("All of the above");
        });
      });
      return describe("filter", function() {
        return it("should return models for which filter expression is truthy", function() {
          var evens;
          evens = this.collection.filter(function(model) {
            return model.get('position') % 2 === 0;
          });
          return _.map(evens, function(model) {
            return model.get('position');
          }).should.eql([2, 4, 2, 4]);
        });
      });
    });
  });

}).call(this);
