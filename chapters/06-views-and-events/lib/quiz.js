// Generated by CoffeeScript 1.6.1
(function() {
  var root;

  root = this;

  root.ChoiceShowView = Backbone.View.extend({
    tagName: 'label',
    className: 'radio',
    template: JST['choices/show'],
    render: function() {
      this.$el.html(this.template({
        choice: this.model
      }));
      return this;
    }
  });

  root.ChoicesIndexView = Backbone.View.extend({
    className: 'controls well',
    render: function() {
      var _this = this;
      _(this.collection.where({
        exercise_id: this.model.id
      })).forEach(function(choice) {
        return _this.$el.append(new ChoiceShowView({
          model: choice
        }).render().el);
      });
      return this;
    }
  });

  root.Solutions = Backbone.Collection.extend({
    url: '/api/practice/solutions'
  });

  root.ExercisesIndexView = Backbone.View.extend({
    className: 'control-group well',
    template: JST['exercises/index'],
    events: {
      "click input[type='submit']": 'submit',
      "click input[value='Next']": 'render',
      "click input[value='Done']": 'undelegateEvents'
    },
    initialize: function(options) {
      this.choices = options.choices;
      this.solutions = options.solutions;
      return this.index = 0;
    },
    render: function() {
      this.model = this.collection.at(this.index);
      if (this.index === (this.collection.length - 1)) {
        this.index = 0;
      } else {
        this.index++;
      }
      this.$el.html(this.template({
        exercise: this.model
      }));
      this.$('.control-label').after(new ChoicesIndexView({
        model: this.model,
        collection: this.choices
      }).render().el);
      return this;
    },
    submit: function() {
      var choiceId, options;
      choiceId = this.$("input[name='choices']:checked").val();
      if (!choiceId) {
        return this.$('.notice').text("Please select an answer.");
      }
      this.$("input[type='submit']").attr('disabled', 'disabled');
      options = {
        success: function(solution) {
          return this.$('.notice').text((solution.get('correct') ? 'Correct' : 'Incorrect'));
        },
        error: function(solution, response) {
          return editor.log("Server error: " + response.status + " " + response.statusText + " " + response.responseText);
        }
      };
      return this.solutions.create({
        exercise_id: this.model.id,
        choice_id: choiceId
      }, options);
    }
  });

  root.SolutionsView = Backbone.View.extend({
    className: 'alert alert-info',
    attributes: {
      style: "position: fixed; top: 48px; right: 12px;"
    },
    events: {
      'click button.close': 'destroy'
    },
    initialize: function(options) {
      return this.collection.on('all', this.render, this);
    },
    render: function() {
      this.$el.html("<button class='close'>Ã—</button>");
      this.$el.append("Correct: " + (this.collection.where({
        correct: true
      }).length) + "/" + this.collection.length);
      return this;
    },
    destroy: function() {
      this.collection.off(null, null, this);
      return this.$el.remove();
    }
  });

}).call(this);
