// Generated by CoffeeScript 1.6.1
(function() {

  describe('Eco Templates', function() {
    before(function() {
      return this.exercises = new Backbone.Collection([
        {
          id: 101,
          body: "Who created Backbone?"
        }, {
          id: 102,
          body: "Backbone implements which architectural pattern?"
        }
      ]);
    });
    describe("eco", function() {
      describe("render literal", function() {
        return it("should return literal content unchanged", function() {
          var output, template;
          template = '<strong>Backbone + CoffeeScript</strong>';
          output = eco.render(template);
          return output.should.equal(template);
        });
      });
      describe("render model", function() {
        return it("should interpolate model content", function() {
          var exercise, output, template;
          template = "<label><%= @exercise.get 'body' %></label>";
          exercise = this.exercises.at(0);
          output = eco.render(template, {
            exercise: exercise
          });
          return output.should.equal("<label>Who created Backbone?</label>");
        });
      });
      describe("compile", function() {
        return it("should return a reusable function", function() {
          var exercise, showExercise, template, _i, _len, _ref, _results;
          template = "<label><%= @exercise.get 'body' %></label>";
          showExercise = eco.compile(template);
          _ref = this.exercises.shuffle();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            exercise = _ref[_i];
            _results.push((function(exercise) {
              var output;
              output = showExercise({
                exercise: exercise
              });
              return output.should.equal("<label>" + (exercise.get('body')) + "</label>");
            })(exercise));
          }
          return _results;
        });
      });
      return describe("compile heredoc", function() {
        return it("should return a reusable function", function() {
          var exercise, output, showExercise;
          showExercise = eco.compile('<div class="well">\n  <label><%= @exercise.get \'body\' %></label>\n  <div class="controls well">\n    <label class="radio">\n      <input type="radio" name="choices" value="1">\n      Choice 1\n    </label>\n  </div>\n</div>');
          exercise = this.exercises.at(0);
          output = showExercise({
            exercise: exercise
          });
          return output.should.match(/Who created Backbone?/);
        });
      });
    });
    describe("underscore", function() {
      return describe("JavaScript existential", function() {
        return it("should handle a missing context variable", function() {
          var output;
          JST['underscore/exercises/index'] = _.template($('#underscore-exercises-index').html());
          output = JST['underscore/exercises/index']({});
          return output.should.match(/The length of the quiz, if it exists:/);
        });
      });
    });
    describe("eco", function() {
      describe("existential", function() {
        return it("should handle a missing context variable", function() {
          var output;
          output = JST['exercises/index']({});
          return output.should.match(/The length of the quiz, if it exists:/);
        });
      });
      describe("conditional", function() {
        return it("should return the correct content based on model state", function() {
          var solution;
          solution = new Backbone.Model({
            correct: false
          });
          return JST['solutions/show']({
            solution: solution
          }).should.match(/Your answer was incorrect./);
        });
      });
      describe("ad-hoc helper", function() {
        return it("should modify context data", function() {
          var context, template;
          context = {
            model: new Backbone.Model({
              name: 'Fred'
            }),
            loud: function(s) {
              return s.toUpperCase();
            }
          };
          template = "Hi there, <%= @loud @model.get('name') %>.";
          return eco.render(template, context).should.equal("Hi there, FRED.");
        });
      });
      return describe("global namespaced helper", function() {
        return it("should modify context data", function() {
          var context, template;
          window.ViewHelpers || (window.ViewHelpers = {});
          window.ViewHelpers.loud = function(s) {
            return s.toUpperCase();
          };
          context = $.extend({
            model: new Backbone.Model({
              name: 'Fred'
            })
          }, window.ViewHelpers);
          template = "Hi there, <%= @loud @model.get('name') %>.";
          return eco.render(template, context).should.equal("Hi there, FRED.");
        });
      });
    });
    describe("moment", function() {
      return describe("timeago helper", function() {
        return it("should modify context data", function() {
          var context, template;
          _.mixin({
            timeago: function(date, parseFormat) {
              return moment(date, parseFormat).fromNow();
            }
          });
          context = {
            date: new Date(2010, 9, 30)
          };
          template = "The first Backbone.js commit was <%= _.timeago @date %>.";
          return eco.render(template, context).should.equal("The first Backbone.js commit was 2 years ago.");
        });
      });
    });
    describe("accounting", function() {
      return describe("formatMoney", function() {
        return it("should modify context data", function() {
          var context, data, template;
          data = {
            person: {
              name: 'Fred'
            },
            debt: 15000
          };
          context = $.extend({}, window.accounting, data);
          template = 'Hi there, <%= @person.name %>.\nI know, I still owe you <%= @formatMoney @debt %>!';
          return eco.render(template, context).should.equal('Hi there, Fred.\nI know, I still owe you $15,000.00!');
        });
      });
    });
    describe("underscore.string", function() {
      return describe("capitalize and toSentence", function() {
        return it("should modify context data", function() {
          var context, output, template;
          context = {
            words: ["good", "bad", "ugly"],
            capitalize: _.str.capitalize,
            toSentence: _.str.toSentence,
            movieTitleize: function(array) {
              var s;
              return this.toSentence((function() {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = array.length; _i < _len; _i++) {
                  s = array[_i];
                  _results.push("the " + this.capitalize(s));
                }
                return _results;
              }).call(this));
            }
          };
          template = 'Here come <%= @movieTitleize @words %>.';
          output = eco.render(template, context);
          return output.should.equal("Here come the Good, the Bad and the Ugly.");
        });
      });
    });
    return describe("eco", function() {
      describe("safe and escape helpers", function() {
        return it("should be available by default", function() {
          var template;
          template = 'I am Eco. My built-in helpers are <%= @safe (x for x of @).join(" &amp; ") %>.';
          return eco.render(template).should.equal('I am Eco. My built-in helpers are safe &amp; escape.');
        });
      });
      return describe("formFor", function() {
        return it("should utilize captured blocks", function() {
          var context, output;
          window.ViewHelpers || (window.ViewHelpers = {});
          window.ViewHelpers.formFor = function(model, yield_to) {
            var body, form, url,
              _this = this;
            form = {
              textField: function(attribute) {
                var name, value;
                name = _this.escape(attribute);
                value = _this.escape(model.get(attribute));
                return _this.safe("<input type='text' name='" + name + "' value='" + value + "'>");
              }
            };
            url = "/projects/" + model.id;
            body = yield_to(form);
            return this.safe("<form action='" + url + "' method='post'>" + body + "</form>");
          };
          context = $.extend({
            project: new Backbone.Model({
              id: 1,
              name: "Mobile app"
            })
          }, window.ViewHelpers);
          output = JST['exercises/new'](context);
          return $(output).find('input').first().val().should.equal("Mobile app");
        });
      });
    });
  });

}).call(this);
