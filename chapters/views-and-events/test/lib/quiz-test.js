// Generated by CoffeeScript 1.3.1
(function() {

  describe('Views and Events', function() {
    before(function() {
      this.exercises = new Backbone.Collection([
        {
          id: 101,
          body: "Who created Backbone?"
        }
      ]);
      return this.choices = new Backbone.Collection([
        {
          id: 1,
          exercise_id: 101,
          body: "Brendan Eich",
          position: 1
        }, {
          id: 2,
          exercise_id: 101,
          body: "Jeremy Ashkenas",
          position: 2
        }, {
          id: 3,
          exercise_id: 101,
          body: "John Resig",
          position: 3
        }, {
          id: 4,
          exercise_id: 101,
          body: "Yehuda Katz",
          position: 4
        }, {
          id: 5,
          exercise_id: 101,
          body: "Douglas Crockford",
          position: 5
        }
      ]);
    });
    describe("Backbone.View", function() {
      return describe("el", function() {
        it("should return an unattached div by default", function() {
          var view;
          view = new Backbone.View;
          view.el.tagName.should.equal('DIV');
          return expect(view.el.parentElement).to.be["null"];
        });
        return it("should return an element matching provided configuration", function() {
          var view;
          view = new Backbone.View({
            id: 'choice-1',
            tagName: 'li',
            className: 'choice',
            attributes: {
              title: 'Choice 1',
              'data-my-flag': true
            }
          });
          view.$el.attr('id').should.equal('choice-1');
          view.$el.is('li').should.be["true"];
          view.$el.hasClass('choice').should.be["true"];
          view.$el.attr('title').should.equal('Choice 1');
          return view.$el.data('my-flag').should.be["true"];
        });
      });
    });
    describe("ChoiceShowView", function() {
      return describe("render", function() {
        return it("should use the correct template and the provided model", function() {
          var choice, view;
          choice = new Backbone.Model({
            id: "1",
            body: "None of the above."
          });
          view = new ChoiceShowView({
            model: choice
          });
          view.render();
          view.$el.find("input").first().attr('name').should.equal("choices");
          return view.$el.text().should.equal("None of the above.");
        });
      });
    });
    describe("ChoicesIndexView", function() {
      return describe("render", function() {
        return it("should use the correct template and the provided collection", function() {
          var exercise, view;
          exercise = this.exercises.at(0);
          view = new ChoicesIndexView({
            model: exercise,
            collection: this.choices
          });
          return view.render().$el.find("label").first().text().should.equal("Brendan Eich");
        });
      });
    });
    describe("ExercisesIndexView", function() {
      return describe("render", function() {
        return it("should use the correct template and the provided collection", function() {
          var view;
          view = new ExercisesIndexView({
            collection: this.exercises,
            choices: this.choices,
            solutions: new Solutions()
          });
          view.render();
          view.$el.find("label").first().text().should.equal("Who created Backbone?");
          return view.$el.find("label").last().text().should.equal("Douglas Crockford");
        });
      });
    });
    return describe("SolutionsView", function() {
      beforeEach(function() {
        this.solutions = new Solutions([
          {
            correct: true
          }, {
            correct: true
          }, {
            correct: false
          }
        ]);
        this.view = new SolutionsView({
          collection: this.solutions
        });
        return this.view.render();
      });
      describe("render", function() {
        return it("should use the correct template and the provided collection", function() {
          return this.view.el.innerHTML.should.equal("<button class=\"close\">×</button>Correct: 2/3");
        });
      });
      return describe("collection event", function() {
        return it("should re-render itself when its collection changes", function() {
          this.solutions.add({
            correct: false
          });
          return this.view.el.innerHTML.should.equal("<button class=\"close\">×</button>Correct: 2/4");
        });
      });
    });
  });

}).call(this);
